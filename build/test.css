/** @define Test */

/**
 * The 'describe' CSS counter
 */

.Test {
  counter-reset: test-describe;
}

.Test-describe::before {
  content: counter(test-describe);
  counter-increment: test-describe;
}

/**
 * The 'it' CSS counter
 */

.Test-describe {
  counter-reset: test-it;
}

.Test-it::before {
  content: counter(test-describe) "." counter(test-it);
  counter-increment: test-it;
}

/**
 * The test title
 */

.Test-title {
  background: #eee;
  color: #999;
  font-family: sans-serif;
  font-size: 2em;
  margin: 20px 0;
  padding: 20px;
}

/**
 * The test description and expectation titles
 */

.Test-describe,
.Test-it {
  background: #eee;
  border-left: 5px solid #666;
  color: #666;
  font-family: sans-serif;
  font-weight: bold;
  margin: 20px 0;
  padding: 0.75em 20px;
}

.Test-describe {
  font-size: 1.5em;
  margin: 60px 0 20px;
}

/**
 * The counter styles
 */

.Test-describe::before,
.Test-it::before {
  color: #999;
  display: inline-block;
  margin-right: 10px;
  min-width: 30px;
  text-transform: uppercase;
}

/** @define Form */

:root {

  /* .Form-label properties */

  /* .Form-input properties */

  /* checkbox and radio properties */

  /* Custom <select> arrow properties */
  /* stylelint-disable */
   /* stylelint-enable */

  /* .Form-message properties */

  /* .Form--spaced properties */

  /* .Form-field's State properties */

  /* .Form-field.is-valid properties */

  /* .Form-field.is-invalid properties */

  /* .Form-field.is-warning properties */
}

/**
 * Generic Form component
 *
 * Provides styles to create stacked forms
 */

/* Form parts
   ========================================================================== */

/**
 * Form container â€“ usually the <form> element.
 */

.Form {
  display: block;
  margin: 0;
  width: 100%;
}

/**
 * Form field.
 *
 * Container for text (label), a form input and (optionally) a message.
 */

.Form-field {
  display: block;
  margin: 0;
  padding: 0;
}

/**
 * Form label.
 */

.Form-label {
  color: inherit;
  display: inline-block;
  font-size: inherit;
  font-weight: bold;
  margin: 0;
}

/**
 * Form input.
 */

.Form-input {
  border: 1px solid currentColor;
  border-radius: 3px;
  box-sizing: border-box;
  color: inherit;
  display: block;
  font-family: inherit;
  font-size: inherit;
  margin: 0;
  padding: 0.5em;
  width: 100%;
}

/**
 * Simple Custom <select>.
 *
 * 1. Change the `appearance` so that padding and custom arrow applies.
 */

@supports ((-webkit-appearance: none) or (-moz-appearance: none) or (appearance: none)) {

  /* postcss-bem-linter: ignore */

  select.Form-input {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none; /* 1 */

    /* Custom arrow styles. */

    background-image: url('data:image/svg+xml;charset=UTF-8,<svg%20xmlns%3D"http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg"%20viewBox%3D"0%200%20276.7%20153"%20enable-background%3D"new%200%200%20276.7%20153"><path%20d%3D"M276.7%200H0l138.2%20153z"%20%2F><%2Fsvg>');
    background-position: right 0.5em center;
    background-repeat: no-repeat;
    background-size: 12px;
    padding-right: calc(
        12px + 1em
      );
  }
}

/**
 * Range input resets.
 */

.Form-input[type="range"] {
  border: 0;
  padding: 0;
}

/**
 * Form field message.
 */

.Form-message {
  color: inherit;
  display: block;
  font-size: inherit;
  font-weight: bold \9;
  margin: 0;
}

/**
 * Form button
 * and form <button> wrapper.
 *
 * N.B. Form-button and Form-buttonWrap makes buttons full-width.
 *      Set the `display` property to `inline-block` to change this behavior.
 *      The rules are `!important` to ensure consistency with the Form styles.
 *      <button>s are not styled and the styling is left to the consumer
 *      of this component.
 */

.Form-button,
.Form-wrapButton {
  display: block;
  margin: 0;
  width: 100%;
}

/* postcss-bem-linter: ignore */

.Form-button,
.Form-wrapButton button {
  border-radius: 3px !important;
  box-sizing: border-box !important;
  font-family: inherit !important;
  font-size: inherit !important;
  padding: 0.5em !important;
}

/* postcss-bem-linter: ignore */

.Form-wrapButton button {
  display: block;
  margin: 0 !important;
  width: 100% !important;
}

/**
 * Modifier: Form-field--checkbox, Form-field--radio
 *
 * 1. Immutable property.
 */

.Form-field--checkbox,
.Form-field--radio {
  display: table;
}

.Form-field--checkbox .Form-input,
.Form-field--radio .Form-input {
  border: 0;
  display: table-cell;
  margin-right: 0.5em !important; /* 1 */
  padding: 0;
  width: auto !important; /* 1 */
}

/* postcss-bem-linter: ignore */

[dir="rtl"] .Form-field--checkbox .Form-input,
[dir="rtl"] .Form-field--radio .Form-input {
  margin-left: 0.5em !important; /* 1 */
  margin-right: 0 !important; /* 1 */
}

.Form-field--checkbox .Form-label,
.Form-field--radio .Form-label {
  display: table-cell;
  font-weight: normal;
}

/**
 * Modifier: adds vertical space between Form-field
 *
 * 1. Prevents collapsing margins
 */

.Form--spaced {
  display: inline-block; /* 1 */
  margin-top: -1.25em;
}

.Form--spaced .Form-field {
  margin-top: 1.25em;
}

.Form--spaced .Form-field--checkbox + .Form-field--checkbox,
.Form--spaced .Form-field--radio + .Form-field--radio {
  margin-top: 0.625em;
}

/**
 * State: is-valid
 */

.Form-field.is-valid .Form-label {
  color: #008000;
}

.Form-field.is-valid .Form-input {
  border-color: #008000;
  outline-color: #008000;
}

.Form-field.is-valid .Form-message {
  color: #008000;
}

/**
 * State: is-invalid
 */

.Form-field.is-invalid .Form-label {
  color: #f00;
}

.Form-field.is-invalid .Form-input {
  border-color: #f00;
  outline-color: #f00;
}

.Form-field.is-invalid .Form-message {
  color: #f00;
}

/**
 * State: is-warning
 */

.Form-field.is-warning .Form-label {
  color: #ffa500;
}

.Form-field.is-warning .Form-input {
  border-color: #ffa500;
  outline-color: #ffa500;
}

.Form-field.is-warning .Form-message {
  color: #ffa500;
}

